/******************************************************************************

                            Online Java Compiler.
                Code, Compile, Run and Debug java program online.
Write your code in this editor and press "Run" button to execute it.

*******************************************************************************/
import java.util.*;
class Node{
    int key;
    Node left;
    Node right;
    Node (int k) {
        key = k;
    }
}
public class Main
{
    
    public static void inorder(Node root) {
         if (root != null) {
             inorder(root.left);
             System.out.print(root.key + "->");
             inorder(root.right);
         }
    }
    public static void preorder(Node root) {
        if (root != null) {
            System.out.print(root.key + "->");
            preorder(root.left);
            preorder(root.right);
        }
    }
    public static void postorder(Node root) {
        if (root != null) {
            preorder(root.left);
            preorder(root.right);
            System.out.print(root.key + "->");
        }
    }
    public static int height(Node root) {
        if (root == null) {
            return 0;
        }
        else {
            return Math.max(height(root.left),height(root.right)) + 1;
        }
    }
    public static void kNode(Node root,int k) {
        if (root == null) {
            return;
        }
        if (k == 0) {
            System.out.print(root.key + " ");
        }
        else {
            kNode(root.left,k - 1);
            kNode(root.right,k - 1);
        }
    }
    public static int maximumNode(Node root) {
        if (root == null) {
            return Integer.MIN_VALUE;
        }
        else {
            return Math.max(root.key,Math.max(maximumNode(root.left),maximumNode(root.right)));
        }
    }
    public static void levelOrder(Node root) {
        if(root == null) return;
        Queue<Node> q = new LinkedList<Node>();
        q.add(root);
        while (q.isEmpty() == false) {
            Node curr = q.poll();
            System.out.print(curr.key + " ");
            if (curr.left != null) q.add(curr.left);
            if (curr.right != null) q.add(curr.right);
        }
    }
    static int maxlevel = 0;
    public static void leftView(Node root,int level) {
        if (root == null) return;
        if (maxlevel < level) {
            System.out.print(root.key + " ");
            maxlevel = level;
        }
        leftView(root.left,level + 1);
        leftView(root.right,level + 1);
    }
	public static void main(String[] args) {
	    
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.left = new Node(4);
		root.left.right = new Node(5);
		root.right.left = new Node(6);
		root.left.left.right = new Node(7);
		System.out.println("Inorder Traversal:");
		inorder(root);
		System.out.println();
		System.out.println("Preorder Traversal:");
		preorder(root);
		System.out.println();
		System.out.println("Postorder Traversal:");
		postorder(root);
		System.out.println();
		System.out.println("Height of the Tree : " + height(root));
		System.out.println("Nodes at K Distance :");
		kNode(root,2);
		System.out.println();
		System.out.println("Maximum node in the tree: " + maximumNode(root));
		System.out.println("Level Order Traversal:");
		levelOrder(root);
		System.out.println("Left View of the Tree:");
		leftView(root,1);
		
	
		
		
	}
}
